library(gapminder)
install.packages(gapminder)
install.packages("gapminder")
library(gapminder)
version
library(dplyr)
library(gapminder)
library(dplyr)
library(ggplot2)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
gapminder
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent)
geom_point()
scale_x_log10("pop")
scale_y_log10("gdpPercap")
library(ggplot2)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent) +
geom_point() +
scale_x_log10("pop") +
scale_y_log10("gdpPercap")
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent)) +
geom_point() +
scale_x_log10("pop") +
scale_y_log10("gdpPercap")
ggplot(gapminder_1952, aes( x = pop, y = gdpPercap, color = continent, size = pop)) +
geom_point() +
scale_x_log10("pop") +
scale_y_log10("gdpPercap")
update.packages()
update.packages()
update.packages()
update.packages()
update.packages()
update.packages(ask = FALSE)
update.packages(ask = FALSE)
update.packages(ask = FALSE)
install.packages(boot)
install.packages("boot")
update.packages(ask = FALSE)
install.packages("boot")
library(caret
)
library(data.table)
library(boot)
.libpaths()
libpaths()
.libpaths()
library(dplyr)
update.packages(ask = FALSE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
library(tidyverse)
library(caret)
?paralell
?parallel
?registerDoParallel
?preProcess
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("pandoc")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("Rtools")
update()
updateR()
library(installr)
updateR()
install.packages(c("BH", "bibtex", "bookdown", "broom", "cairoDevice", "callr", "car", "carData", "caret", "caTools", "chron", "classInt", "cli", "cmprsk", "curl", "data.table", "DBI", "ddalpha", "devtools", "digest", "DSL", "DT", "e1071", "ellipsis", "Epi", "etm", "fansi", "fields", "foreign", "gender", "geometry", "gh", "haven", "hexbin", "HistData", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "IRkernel", "ISOcodes", "jomo", "jpeg", "kernlab", "knitr", "later", "latticeExtra", "leaflet", "lpSolve", "maptools", "Matrix", "mgcv", "mice", "microbenchmark", "mime", "ModelMetrics", "multcomp", "mvtnorm", "network", "openNLP", "openxlsx", "ordinal", "pdftools", "pgmm", "pillar", "pkgbuild", "pkgconfig", "pkgmaker", "plotly", "plotrix", "pls", "plyr", "prettyunits", "prodlim", "promises", "psych", "purrr", "qdap", "quantreg", "R.cache", "R.oo", "R.utils", "R6", "ranger", "raster", "rattle", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RDS", "recipes", "repr", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "rngtools", "roxygen2", "rpart.plot", "rsconnect", "rvest", "RWeka", "RWekajars", "scales", "selectr", "sf", "shiny", "slam", "sp", "spam", "SparseM", "spData", "SQUAREM", "stringdist", "stringi", "stylo", "survival", "swirl", "sys", "testthat", "tidyr", "tidyselect", "tidyverse", "tigris", "tinytex", "tm", "trust", "TTR", "units", "vctrs", "whisker", "xfun", "XML", "xts", "zip", "zoo"))
install.packages(rmarkdown)
install.packages("rmarkdown")
library("tidyverse")
library("caret")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
setwd("C:/Users/Utilizador/Desktop/kaggle/Titanic---Survival-Prediction")
set.seed(45613)
# Load data
test <- read.csv('test.csv', stringsAsFactors = FALSE)
train <- read.csv('train.csv', stringsAsFactors = FALSE)
glimpse(train)
install.packages("dplyr")
glimpse(train)
glimpse(test)
library("tidyverse")
library("caret")
setwd("C:/Users/Utilizador/Desktop/kaggle/Titanic---Survival-Prediction")
set.seed(45613)
install.packages("tidyverse")
library("tidyverse")
install.packages(‘vctrs’)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library("tidyverse")
glimpse(train)
summarise(train, Survival = sum(Survived)/nrow(train)*100)
titanic <- full_join(train, test)
glimpse(titanic)
titanicPre <- titanic %>% select(-Ticket, -Name, -Cabin, -Embarked)
pre.proc <- preProcess(titanicPre, method = "bagImpute")
titanicPre <- predict(pre.proc, titanicPre)
titanic$Age <- titanicPre$Age
titanicPre <- titanic %>% select(-Ticket, -Name, -Cabin, -Embarked)
pre.proc <- preProcess(titanicPre, method = "bagImpute")
library("caret")
pre.proc <- preProcess(titanicPre, method = "bagImpute")
titanicPre <- predict(pre.proc, titanicPre)
titanic$Age <- titanicPre$Age
library(forcats)
titanic <- titanic %>%
mutate(Survived = factor(Survived)) %>%
mutate(Survived = fct_recode(Survived, "No" = "0", "Yes" = "1"))
titanic <- titanic %>%
mutate(Sex = factor(Sex)) %>%
mutate(Sex = fct_recode(Sex, "Female" = "female", "Male" = "male"))
ggplot(titanic[1:891,], aes(Sex, fill=Survived)) +
geom_bar(position = "fill") +
ylab("Survival") +
geom_hline(yintercept = (sum(train$Survived)/nrow(train)), col = "black", lty = 2) +
ggtitle("Survival by Sex")
library(stringr)
titanic <- mutate(titanic, Title = str_sub(Name, str_locate(Name, ",")[ , 1] + 2, str_locate(Name, "\\.")[ , 1] - 1))
titanic %>%
count(Title, sort = TRUE)
titanic <- titanic %>%
mutate(Title = factor(Title)) %>%
mutate(Title = fct_collapse(Title, "Miss" = c("Mlle", "Ms"), "Mrs" = c("Mme", "the Countess"),
"Mr" = c( "Major", "Capt", "Col", "Rev", "Don", "Jonkheer"), "Other" = c("Lady", "Dr", "Sir", "Dona")
))
titanic %>%
count(Title, sort = TRUE)
titanic <- titanic %>%
mutate(Family = SibSp + Parch + 1) %>%
mutate(FamilySize = factor(ifelse(Family > 4, "Large", ifelse(Family == 1, "Single", "Small"))))
titanic %>%
count(FamilySize, sort = TRUE)
titanic %>%
count(Embarked, sort = TRUE)
titanic$Embarked[titanic$Embarked == ""] <- NA
titanic %>%
filter(is.na(Embarked))
titanic %>%
group_by(Embarked, Pclass) %>%
filter(Pclass == "1") %>%
summarise(mFare = median(Fare), n = n())
titanic$Embarked[c(62, 830)] <- 'C'
titanic <- titanic %>%
mutate(Embarked = factor(Embarked))
titanic %>%
filter(is.na(Fare))
titanic <- titanic %>%
mutate(Fare = ifelse(PassengerId == 1044,
median(filter(titanic,!is.na(Fare),
Pclass == 3,
PassengerId != 1044)$Fare), Fare))
titanic <- titanic %>%
mutate(FareGrp = factor(case_when(
between(Fare, 0, 100) ~ "<=100",
Fare > 100 ~ ">100")))
titanic %>%
count(FareGrp)
titanic <- titanic %>%
mutate(Pclass = factor(Pclass))
titanic <- titanic %>%
mutate(AgeGrp = factor( case_when(
between(Age, 0, 16) ~ "young",
between(Age, 16, 50) ~ "adult",
Age > 50 ~ "old")))
titanic %>%
count(AgeGrp)
train1 <- titanic[1:891,]
test1 <- titanic[892:1309,]
library(party)
set.seed(456)
titanic_model <- cforest(Survived ~
Sex +
Title +
FamilySize +
FareGrp +
Pclass +
AgeGrp +
Embarked,
data = train1,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
ptable <- table(predict(titanic_model), train1$Survived)
library(caret)
confusionMatrix(ptable)
varimp(titanic_model)
tm.pred <- predict(titanic_model, newdata = test1, OOB=TRUE, type = "response")
tm.pred <- ifelse(tm.pred == "No", 0, 1)
tm.output <- data.frame(PassengerID = test1$PassengerId, Survived = tm.pred)
head(tm.output)
tail(tm.output)
write.csv(tm.output, file = 'titanic_model.csv', row.names = F)
